// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid()) @db.VarChar(36)
  name            String
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())

  accounts Account[]
  products Product[]
  addresses Address[]
  transactions Transaction[]
  comments Comment[]
}

model Account {
  id                  String    @id @default(uuid()) @db.VarChar(36)
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?   @db.Text
  access_token        String?   @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?   @db.Text
  sesion_state        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id            String  @id @default(uuid()) @db.VarChar(36)
  userId        String  @db.VarChar(36)

  label         String  @db.VarChar(30)
  name          String  @db.VarChar(50)
  phone         String  @db.VarChar(20)
  city_district String  @db.VarChar(100)
  district      String  @db.VarChar(50)
  city_id       String  @db.VarChar(5)
  city          String  @db.VarChar(50)
  province_id   String  @db.VarChar(5)
  province      String  @db.VarChar(50)
  postal_code   String  @db.VarChar(5)
  address       String  @db.VarChar(200)
  notes         String? @db.VarChar(50)

  primary       Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id              String    @id @default(cuid()) @db.VarChar(36)
  name            String    @db.VarChar(200)
  description     String    @db.VarChar(2000)
  images          String    @db.VarChar(255)
  price           Decimal   @db.Decimal(9, 0)
  condition       String    @db.VarChar(20)
  stock           Int       @db.UnsignedMediumInt
  weight          Int       @db.UnsignedMediumInt
  length          Int       @db.UnsignedSmallInt
  width           Int       @db.UnsignedSmallInt
  height          Int       @db.UnsignedSmallInt
  warranty        String    @db.VarChar(10)
  warranty_detail Int       @db.UnsignedSmallInt
  category        String    @db.VarChar(25)
  subcategory     String?   @db.VarChar(50)

  userId          String    @db.VarChar(36)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  comments Comment[]
  transactions Transaction[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id              String    @id @default(uuid()) @db.VarChar(36)
  comment         String    @db.VarChar(2000)
  createdAt       DateTime  @default(now())

  userId          String    @db.VarChar(36)
  productId       String    @db.VarChar(36)
  parentId        String?   @db.VarChar(36)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("CommentToComment")
  parent          Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String    @id @default(uuid()) @db.VarChar(36)
  userId          String    @db.VarChar(36)
  productId       String    @db.VarChar(36)
  address         String    @db.VarChar(350)

  weight          Int       @db.UnsignedMediumInt @default(0)
  courier         String    @db.VarChar(50) @default("")

  price           Decimal   @db.Decimal(9, 0)
  quantity        Int       @db.UnsignedMediumInt
  shipping_cost   Decimal   @db.Decimal(9, 0)
  services_fee    Decimal   @db.Decimal(9, 0)
  total           Decimal   @db.Decimal(12, 0)

  payment_status  payment_status
  shipping_status shipping_status @default(PENDING_SHIPPING)
  no_resi         String?   @db.VarChar(25)

  snap_token      String?   @db.VarChar(255)
  snap_url        String?   @db.VarChar(255)
  snap_expires    DateTime?
  payment_method  String?   @db.VarChar(20)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum payment_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}

enum shipping_status {
  PENDING_SHIPPING
  SHIPPING
  DELIVERED
  CANCELED
}